# Example file showing a basic pygame 'game lool'
import pygame
import time
import math
import asyncio
import random

async def main():
    # pygame setup
    pygame.init()
    screen = pygame.display.set_mode((1280, 720))
    clock = pygame.time.Clock()
    running = True

    # Pong game setup
    paddle_width = 15
    paddle_height = 90
    ball_size = 15
    player_speed = 7
    ai_speed = 6
    ball_speed_x = 7
    ball_speed_y = 7

    # AI behavior settings
    ai_prediction = 100  # How far ahead AI looks to predict ball position
    ai_max_speed = 6     # Maximum speed AI can move
    ai_min_speed = 3     # Minimum speed AI can move
    ai_reaction = 0.85    # Probability of AI moving (adds human-like delay)
    ai_error = 30         # Maximum pixels of random error in AI targeting

    # Colors (neon palette)
    NEON_BLUE = (0, 200, 255)
    NEON_PINK = (255, 0, 255)
    NEON_GREEN = (0, 255, 150)
    BG_COLOR = (0, 0, 30)  # Dark blue background
    GLOW_COLOR = (0, 150, 255, 100)
    OVERLAY_COLOR = (0, 0, 0, 180)  # Semi-transparent black
    VICTORY_COLOR = (0, 255, 100)
    DEFEAT_COLOR = (255, 50, 50)

    # Score setup
    player_score = 0
    ai_score = 0
    font = pygame.font.Font(None, 74)

    # Reset button setup
    reset_button = pygame.Rect(1280//2 - 60, 20, 120, 40)
    small_font = pygame.font.Font(None, 36)

    # Flash effect setup
    flash_duration = 0.1
    flash_end_time = 0
    is_flashing = False
    flash_color = NEON_PINK

    # Game over setup
    game_over = False
    game_over_font = pygame.font.Font(None, 120)
    message_font = pygame.font.Font(None, 74)

    # Create game objects
    player = pygame.Rect(50, 720//2 - paddle_height//2, paddle_width, paddle_height)
    ai = pygame.Rect(1280 - 50 - paddle_width, 720//2 - paddle_height//2, paddle_width, paddle_height)
    ball = pygame.Rect(1280//2 - ball_size//2, 720//2 - ball_size//2, ball_size, ball_size)

    ball_dx = ball_speed_x
    ball_dy = ball_speed_y
    time_passed = 0

    def draw_neon_circle(surface, color, center, radius):
        # Draw multiple circles with decreasing alpha for glow effect
        for i in range(3):
            s = pygame.Surface((radius*2 + 10, radius*2 + 10), pygame.SRCALPHA)
            pygame.draw.circle(s, (*color[:3], 100//(i+1)), (radius + 5, radius + 5), radius + 2 - i)
            surface.blit(s, (center[0] - radius - 5, center[1] - radius - 5))
        pygame.draw.circle(surface, color, center, radius)

    def draw_neon_rect(surface, color, rect, width=0):
        # Draw multiple rectangles with decreasing alpha for glow effect
        for i in range(3):
            expanded_rect = rect.inflate(i*2, i*2)
            pygame.draw.rect(surface, (*color[:3], 100//(i+1)), expanded_rect, width)
        pygame.draw.rect(surface, color, rect, width)

    def show_game_over_screen(player_won):
        # Create semi-transparent overlay
        overlay = pygame.Surface((1280, 720), pygame.SRCALPHA)
        overlay.fill(OVERLAY_COLOR)
        screen.blit(overlay, (0, 0))
        
        # Main game over text
        game_over_text = game_over_font.render("GAME OVER", True, NEON_BLUE)
        screen.blit(game_over_text, (1280//2 - game_over_text.get_width()//2, 220))
        
        # Victory/Defeat message
        if player_won:
            message = "CONGRATULATIONS!"
            color = VICTORY_COLOR
        else:
            message = "SORRY, YOU LOST!"
            color = DEFEAT_COLOR
        
        message_text = message_font.render(message, True, color)
        screen.blit(message_text, (1280//2 - message_text.get_width()//2, 340))
        
        # Instructions
        continue_text = small_font.render("Click RESET to play again", True, NEON_GREEN)
        screen.blit(continue_text, (1280//2 - continue_text.get_width()//2, 460))

    def reset_game():
        global player_score, ai_score, ball_dx, game_over
        player_score = 0
        ai_score = 0
        ball.center = (1280//2, 720//2)
        ball_dx = ball_speed_x
        game_over = False
        # Reset paddle positions
        player.y = 720//2 - paddle_height//2
        ai.y = 720//2 - paddle_height//2

    while running:
        time_passed += clock.get_time() / 1000  # Time for visual effects

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = event.pos
                if reset_button.collidepoint(mouse_pos):
                    reset_game()

        # Player movement
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP] and player.top > 0:
            player.y -= player_speed
        if keys[pygame.K_DOWN] and player.bottom < 720:
            player.y += player_speed

        # AI movement
        if random.random() < ai_reaction:  # Add some reaction delay
            # Predict where ball will be
            future_ball_y = ball.centery
            if ball_dx > 0:  # Only predict when ball is moving towards AI
                # Calculate time until ball reaches AI
                time_to_ai = (ai.centerx - ball.centerx) / ball_dx
                # Predict ball Y position
                future_ball_y = ball.centery + (ball_dy * time_to_ai)
                
                # Add some randomization to prediction
                future_ball_y += random.randint(-ai_error, ai_error)
                
                # Keep prediction within screen bounds
                future_ball_y = min(720 - paddle_height//2, 
                                  max(paddle_height//2, future_ball_y))
                
                # Calculate distance to target
                distance = abs(ai.centery - future_ball_y)
                
                # Adjust speed based on distance
                ai_speed = min(ai_max_speed, 
                             max(ai_min_speed, distance / 30))
                
                # Move towards predicted position
                if ai.centery < future_ball_y and ai.bottom < 720:
                    ai.y += ai_speed
                if ai.centery > future_ball_y and ai.top > 0:
                    ai.y -= ai_speed
            else:
                # Return to center when ball is moving away
                if abs(ai.centery - 720//2) > ai_min_speed:
                    if ai.centery > 720//2:
                        ai.y -= ai_min_speed
                    else:
                        ai.y += ai_min_speed

        # Ball movement
        ball.x += ball_dx
        ball.y += ball_dy

        # Ball collisions
        if ball.top <= 0 or ball.bottom >= 720:
            ball_dy *= -1
        
        if ball.colliderect(player) or ball.colliderect(ai):
            ball_dx *= -1

        # Score handling with flash effect
        if ball.left <= 0:
            ai_score += 1
            ball.center = (1280//2, 720//2)
            ball_dx *= -1
            flash_end_time = time.time() + flash_duration
            is_flashing = True
            flash_color = NEON_PINK
            if ai_score >= 5:
                game_over = True
        if ball.right >= 1280:
            player_score += 1
            ball.center = (1280//2, 720//2)
            ball_dx *= -1
            flash_end_time = time.time() + flash_duration
            is_flashing = True
            flash_color = NEON_GREEN
            if player_score >= 5:
                game_over = True

        # Drawing
        if is_flashing and time.time() < flash_end_time:
            screen.fill(flash_color)
        else:
            screen.fill(BG_COLOR)
            is_flashing = False

        # Draw grid effect
        grid_spacing = 50
        grid_alpha = abs(math.sin(time_passed)) * 50 + 20
        grid_surface = pygame.Surface((1280, 720), pygame.SRCALPHA)
        for x in range(0, 1280, grid_spacing):
            pygame.draw.line(grid_surface, (*NEON_BLUE[:3], int(grid_alpha)), 
                            (x, 0), (x, 720), 1)
        for y in range(0, 720, grid_spacing):
            pygame.draw.line(grid_surface, (*NEON_BLUE[:3], int(grid_alpha)), 
                            (0, y), (1280, y), 1)
        screen.blit(grid_surface, (0, 0))

        # Draw game elements with neon effect
        draw_neon_rect(screen, NEON_BLUE, player)
        draw_neon_rect(screen, NEON_PINK, ai)
        draw_neon_circle(screen, NEON_GREEN, ball.center, ball_size//2)

        # Center line
        for y in range(0, 720, 40):
            draw_neon_rect(screen, NEON_BLUE, pygame.Rect(1280//2 - 2, y, 4, 20))

        # Draw scores with glow
        player_text = font.render(str(player_score), True, NEON_BLUE)
        ai_text = font.render(str(ai_score), True, NEON_PINK)
        screen.blit(player_text, (1280//4, 50))
        screen.blit(ai_text, (3*1280//4, 50))

        # Draw reset button with neon effect
        draw_neon_rect(screen, NEON_GREEN, reset_button)
        reset_text = small_font.render("RESET", True, BG_COLOR)
        screen.blit(reset_text, (reset_button.centerx - reset_text.get_width()//2, 
                                reset_button.centery - reset_text.get_height()//2))

        # Show game over screen if game is over
        if game_over:
            ball_dx = 0
            ball_dy = 0
            show_game_over_screen(player_score >= 5)

        pygame.display.flip()
        clock.tick(60)

        await asyncio.sleep(0)  # Required for web compatibility

    pygame.quit()

asyncio.run(main())
            
            
            
